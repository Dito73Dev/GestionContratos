<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_informe_intersup_adm  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["AfterAdd"]=true;


		$this->events["BeforeShowEdit"]=true;

		$this->events["BeforeEdit"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// After record added
function AfterAdd(&$values, &$keys, $inline, $pageObject)
{

		$sql = DB::prepareSQL("UPDATE
dbct.informe_intersup_plan_pagos
INNER JOIN dbct.informe_intersup ON dbct.informe_intersup_plan_pagos.id_cont_fk = dbct.informe_intersup.id_cont_fk AND dbct.informe_intersup_plan_pagos.inf_consecutivo = dbct.informe_intersup.inf_consecutivo
SET
dbct.informe_intersup_plan_pagos.inf_st = 1
WHERE
dbct.informe_intersup.inf_estado = 1;");
DB::Exec( $sql );

$sql = DB::prepareSQL("UPDATE
dbct.informe_intersup_plan_pagos
LEFT JOIN dbct.informe_intersup ON dbct.informe_intersup_plan_pagos.id_cont_fk = dbct.informe_intersup.id_cont_fk AND dbct.informe_intersup_plan_pagos.inf_consecutivo = dbct.informe_intersup.inf_consecutivo
SET
dbct.informe_intersup_plan_pagos.inf_st = 0
WHERE
dbct.informe_intersup.inf_estado IS NULL;");
DB::Exec( $sql );

$sql = DB::prepareSQL("UPDATE
dbct.informe_intersup_plan_pagos
INNER JOIN dbct.informe_intersup ON dbct.informe_intersup_plan_pagos.id_cont_fk = dbct.informe_intersup.id_cont_fk AND dbct.informe_intersup_plan_pagos.inf_consecutivo = dbct.informe_intersup.inf_consecutivo
SET
dbct.informe_intersup_plan_pagos.inf_st = 2
WHERE
dbct.informe_intersup.inf_estado = 2;");
DB::Exec( $sql );

$sql = DB::prepareSQL("INSERT IGNORE INTO dbct.informe_intersup_oe (
dbct.informe_intersup_oe.inf_id_fk,
dbct.informe_intersup_oe.oe_id_fk,
dbct.informe_intersup_oe.id_cont_fk,
dbct.informe_intersup_oe.cont_nit_contra_ta_fk,
dbct.informe_intersup_oe.oe_ordinal,
dbct.informe_intersup_oe.oe)
SELECT
dbct.q_oe_informe.inf_id,
dbct.q_oe_informe.oe_id,
dbct.q_oe_informe.id_cont_fk,
dbct.q_oe_informe.cont_nit_contra_ta_fk,
dbct.q_oe_informe.oe_ordinal,
dbct.q_oe_informe.oe
FROM
dbct.q_oe_informe");
DB::Exec( $sql );

$sql = DB::prepareSQL("UPDATE
dbct.informe_intersup
INNER JOIN dbct.q_qty_info_inf ON dbct.informe_intersup.inf_id = dbct.q_qty_info_inf.inf_id_fk
SET
dbct.informe_intersup.qty_inf = dbct.q_qty_info_inf.qty;");
DB::Exec( $sql );



// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function AfterAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowEdit(&$xt, &$templatefile, $values, $pageObject)
{

		$pageObject->hideField("sign_hash");
$pageObject->hideField("sign_file");

// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function BeforeShowEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, &$sqlValues, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		$return = true;
if($values['sign_verificacert'] != $values['sign_hash']){
$message = "La clave dinámica suministrada no es válida para el presente documento, por favor intente nuevamente";
$return = false;
}

// Place event code here.
// Use "Add Action" button to add code snippets.

return $return;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>
